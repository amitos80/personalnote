"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

// Common setup functionality taking the info object which abstracts websocket access
exports.setup = setup;

// Socket mixin when a new service is registered
exports.service = service;
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ = _interopRequire(require("lodash"));

var stripSlashes = require("../utils").stripSlashes;

var _helpers = require("./helpers");

var setupEventHandlers = _helpers.setupEventHandlers;
var setupMethodHandlers = _helpers.setupMethodHandlers;

function setup(info) {
  var _this = this;

  var _setupEventHandlers = setupEventHandlers.bind(this, info);

  this._commons = info;

  // For a new connection, set up the service method handlers
  info.connection().on("connection", function (socket) {
    var _setupMethodHandlers = setupMethodHandlers.bind(_this, info, socket);
    // Process all registered services
    _.each(_this.services, _setupMethodHandlers);
  });

  // Set up events and event dispatching
  _.each(this.services, _setupEventHandlers);
}

function service(path, obj) {
  var _this = this;

  var protoService = this._super.apply(this, arguments);
  var info = this._commons;

  // app._socketInfo will only be available once we are set up
  if (obj && info) {
    (function () {
      var _setupEventHandlers = setupEventHandlers.bind(_this, info);
      var _setupMethodHandlers = setupMethodHandlers.bind(_this, info);
      var location = stripSlashes(path);

      // Set up event handlers for this new service
      _setupEventHandlers(protoService, location);
      // For any existing connection add method handlers
      info.clients().forEach(function (socket) {
        return _setupMethodHandlers(socket, location, protoService);
      });
    })();
  }

  return protoService;
}

exports["default"] = { service: service, setup: setup };