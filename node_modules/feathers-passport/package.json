{
  "name": "feathers-passport",
  "version": "0.1.2",
  "description": "Feathers REST and websocket authentication with PassportJS.",
  "homepage": "https://github.com/feathersjs/feathers-passport",
  "keywords": [
    "feathers-plugin",
    "feathers"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/feathersjs/feathers-passport/blob/master/LICENSE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/feathersjs/feathers-passport.git"
  },
  "author": {
    "name": "David Luecke",
    "email": "daff@neyeon.com",
    "url": "https://feathersjs.com"
  },
  "contributors": [],
  "bugs": {
    "url": "https://github.com/feathersjs/feathers-passport/issues"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "main": "lib/passport.js",
  "scripts": {
    "test": "grunt test"
  },
  "directories": {
    "lib": "lib"
  },
  "dependencies": {
    "cookie-parser": "^1.3.3",
    "debug": "^2.0.0",
    "express-session": "^1.8.1",
    "lodash": "^2.4.1",
    "passport": "^0.2.1"
  },
  "devDependencies": {
    "body-parser": "^1.9.0",
    "feathers": "^1.0.0",
    "feathers-hooks": "^0.4.0",
    "feathers-memory": "^0.3.4",
    "grunt": "~0.4.1",
    "grunt-cli": "~0.1.7",
    "grunt-contrib-jshint": "~0.x",
    "grunt-contrib-watch": "~0.5.3",
    "grunt-release": "~0.5.1",
    "grunt-simple-mocha": "~0.4.0",
    "mocha": "*",
    "passport-local": "^1.0.0",
    "request": "^2.44.0",
    "socket.io-client": "^1.1.0",
    "tough-cookie": "^0.12.1",
    "xmlhttprequest": "^1.6.0"
  },
  "gitHead": "e135f14e3744657ead9bca7c854d774cbd1b4b43",
  "readme": "# Feathers Passport\n\n[![Build Status](https://travis-ci.org/feathersjs/feathers-passport.png?branch=master)](https://travis-ci.org/feathersjs/feathers-passport)\n\nfeathers-passport adds shared [PassportJS](http://passportjs.org/) authentication for Feathers HTTP REST and websockets services.\n\n## Options\n\nfeathers-passport will configure the cookieparser, session and Passport middleware for you.\nThe following options are available:\n\n- __secret__ *required* - The session secret\n- __store__ *require* - A session store to use. Must be provided. `new require('express-session').MemoryStore();` is an option but is not recommended for production.\n- __name__ (default: `connect.sid`) - The session name (previous `key`)\n- __cookieParser__ (default: `require('cookie-parser')`) - The cookie parser middleware to use\n- __passport__ (default: `require('passport')`) - The passport module\n- __createSession__ (default: `require('express-session')`) - A function that can be called with the options and returns the actual session middleware\n\nYou can also pass a function that gets the default values so that you can use them for returning a new configuration. This can be useful to e.g. configure the [connect-mongo](https://github.com/kcbanner/connect-mongo) session store:\n\n```js\nvar passport = require('passport');\nvar connectMongo = require('connect-mongo');\nvar feathersPassport = require('feathers-passport');\n\nvar app = feathers();\n\napp.configure(feathers.rest())\n  .configure(feathers.socketio())\n  .configure(feathersPassport(function(defaults) {\n    // MongoStore needs the session function\n    var MongoStore = connectMongo(defaults.createSession);\n    return {\n      secret: 'feathers-rocks'\n      store: new MongoStore({\n        db: 'feathers-demo'\n      })\n    };\n  });\n```\n\n## Example\n\nThe following shows a commented example for an application using local authentication with a Feathers user service:\n\n```js\nvar feathers = require('feathers');\nvar passport = require('passport');\nvar crypto = require('crypto');\nvar hooks = require('feathers-hooks');\nvar memory = require('feathers-memory');\nvar bodyParser = require('body-parser');\nvar session = require('express-session');\nvar feathersPassport = require('../lib/passport');\nvar LocalStrategy = require('passport-local').Strategy;\n\n// SHA1 hashes a string\nvar sha1 = function(string) {\n  var shasum = crypto.createHash('sha1');\n  shasum.update(string);\n  return shasum.digest('hex');\n};\n\n// A shared session store must be provided.\n// This MemoryStore is not recommended for production\nvar store = new session.MemoryStore();\n\n// Initialize the application\nvar app = feathers()\n  .configure(feathers.rest())\n  .configure(feathers.socketio())\n  .configure(hooks())\n  // Needed for parsing bodies (login)\n  .use(bodyParser.urlencoded({ extended: true }))\n  // Configure feathers-passport\n  .configure(feathersPassport({\n    // Secret must be provided\n    secret: 'feathers-rocks',\n    // Also set a store\n    store: store,\n    resave: true,\n    saveUninitialized: true\n  }))\n  // Initialize a user service\n  .use('/users', memory())\n  // A simple Todos service that we can use for testing\n  .use('/todos', {\n    get: function(id, params, callback) {\n      callback(null, {\n        id: id,\n        text: 'You have to do ' + id + '!',\n        user: params.user\n      });\n    }\n  })\n  // Add a login route for the passport login\n  .post('/login', passport.authenticate('local', {\n      successRedirect: '/',\n      failureRedirect: '/login.html',\n      failureFlash: false\n  }))\n  // Host this folder\n  .use('/', feathers.static(__dirname));\n\nvar userService = app.service('users');\n\n// Add a hook to the user service that automatically hashes the\n// password before saving it\nuserService.before({\n  create: function(hook, next) {\n    var password = hook.data.password;\n    // Replace the data with the SHA1 hashed password\n    hook.data.password = sha1(password);\n    next();\n  }\n});\n\n// Use the id to serialize the user\npassport.serializeUser(function(user, done) {\n  done(null, user.id);\n});\n\n// Deserialize the user retrieving it form the user service\npassport.deserializeUser(function(id, done) {\n  // Get the user service and then retrieve the user id\n  userService.get(id, {}, done);\n});\n\n// Attach the local strategy\npassport.use(new LocalStrategy(function(username, password, done) {\n    var query = {\n      username: username\n    };\n\n    userService.find({ query: query }, function(error, users) {\n      if(error) {\n        return done(error);\n      }\n\n      var user = users[0];\n\n      if(!user) {\n        return done(new Error('User not found'));\n      }\n\n      // Compare the hashed password\n      if(user.password !== sha1(password)) {\n        return done(new Error('Password not valid'));\n      }\n\n      done(null, user);\n    });\n  }\n));\n\n// Create a user that we can use to log in\nuserService.create({\n  username: 'feathers',\n  password: 'secret'\n}, {}, function(error, user) {\n  console.log('Created default user', user);\n});\n\napp.listen(4000);\n```\n\nAdd a `login.html` with an HTML form that allows to log our user in:\n\n```html\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n  <meta charset=\"UTF-8\">\n  <title></title>\n</head>\n<body>\n  <form action=\"/login\" method=\"post\">\n    <div>\n      <label>Username:</label>\n      <input type=\"text\" name=\"username\"/>\n    </div>\n    <div>\n      <label>Password:</label>\n      <input type=\"password\" name=\"password\"/>\n    </div>\n    <div>\n      <input type=\"submit\" value=\"Log In\"/>\n    </div>\n  </form>\n</body>\n</html>\n```\n\n## Changelog\n\n__0.1.0__\n\n- Initial release\n\n## Author\n\n- [David Luecke](https://github.com/daffl)\n\n## License\n\nCopyright (c) 2014 David Luecke\n\nLicensed under the [MIT license](LICENSE).\n",
  "readmeFilename": "README.md",
  "_id": "feathers-passport@0.1.2",
  "_shasum": "d909ee04e0fc7b0f01da4fa0f584b677812e2b72",
  "_from": "../../../../var/folders/0m/l4z5dwg97j7gn7z_0tlrll1r0000gn/T/npm-22421-f087d38f/git-cache-d9c099a44525/e135f14e3744657ead9bca7c854d774cbd1b4b43",
  "_resolved": "git+https://github.com/ListnPlay/feathers-passport.git#e135f14e3744657ead9bca7c854d774cbd1b4b43"
}
